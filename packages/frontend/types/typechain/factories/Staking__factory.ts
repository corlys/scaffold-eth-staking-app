/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staking, StakingInterface } from "../Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Stake",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deadline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "recipient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "threshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e3338038062000e338339818101604052810190620000379190620000ec565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c204262000087919062000118565b60018190555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001fc565b600081519050620000e681620001e2565b92915050565b600060208284031215620000ff57600080fd5b60006200010f84828501620000d5565b91505092915050565b60006200012582620001a9565b91506200013283620001a9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200016a5762000169620001b3565b5b828201905092915050565b6000620001828262000189565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b620001ed8162000175565b8114620001f957600080fd5b50565b610c27806200020c6000396000f3fe6080604052600436106100865760003560e01c8063614619541161005957806361461954146100f557806366d003ac146100ff5780636f9fb98a1461012a5780638da5cb5b14610155578063e3d670d71461018057610086565b806329dcb0cf1461008b5780633a4b66f1146100b65780633ccfd60b146100c057806342cde4e8146100ca575b600080fd5b34801561009757600080fd5b506100a06101bd565b6040516100ad91906109c6565b60405180910390f35b6100be6101c3565b005b6100c8610311565b005b3480156100d657600080fd5b506100df610488565b6040516100ec91906109c6565b60405180910390f35b6100fd610494565b005b34801561010b57600080fd5b5061011461064a565b60405161012191906108d2565b60405180910390f35b34801561013657600080fd5b5061013f610670565b60405161014c91906109c6565b60405180910390f35b34801561016157600080fd5b5061016a610678565b60405161017791906108d2565b60405180910390f35b34801561018c57600080fd5b506101a760048036038101906101a2919061078e565b61069c565b6040516101b491906109c6565b60405180910390f35b60015481565b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102129190610a08565b925050819055506102976040518060400160405280600781526020017f7361647364617300000000000000000000000000000000000000000000000000815250600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106b4565b7febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a33600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516103079291906108ed565b60405180910390a1565b6001544211610355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034c90610966565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516103ba906108bd565b60006040518083038185875af1925050503d80600081146103f7576040519150601f19603f3d011682016040523d82523d6000602084013e6103fc565b606091505b505090506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90610986565b60405180910390fd5b50565b670de0b6b3a764000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610522576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610519906109a6565b60405180910390fd5b6001544210801561053a575047670de0b6b3a7640000105b610579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057090610946565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516105c1906108bd565b60006040518083038185875af1925050503d80600081146105fe576040519150601f19603f3d011682016040523d82523d6000602084013e610603565b606091505b5050905080610647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063e90610986565b60405180910390fd5b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600047905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b61074c82826040516024016106ca929190610916565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610750565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b60008135905061078881610bda565b92915050565b6000602082840312156107a057600080fd5b60006107ae84828501610779565b91505092915050565b6107c081610a5e565b82525050565b60006107d1826109e1565b6107db81856109f7565b93506107eb818560208601610a9a565b6107f481610afc565b840191505092915050565b600061080c600b836109f7565b915061081782610b0d565b602082019050919050565b600061082f600b836109f7565b915061083a82610b36565b602082019050919050565b60006108526012836109f7565b915061085d82610b5f565b602082019050919050565b60006108756000836109ec565b915061088082610b88565b600082019050919050565b60006108986021836109f7565b91506108a382610b8b565b604082019050919050565b6108b781610a90565b82525050565b60006108c882610868565b9150819050919050565b60006020820190506108e760008301846107b7565b92915050565b600060408201905061090260008301856107b7565b61090f60208301846108ae565b9392505050565b6000604082019050818103600083015261093081856107c6565b905061093f60208301846108ae565b9392505050565b6000602082019050818103600083015261095f816107ff565b9050919050565b6000602082019050818103600083015261097f81610822565b9050919050565b6000602082019050818103600083015261099f81610845565b9050919050565b600060208201905081810360008301526109bf8161088b565b9050919050565b60006020820190506109db60008301846108ae565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610a1382610a90565b9150610a1e83610a90565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a5357610a52610acd565b5b828201905092915050565b6000610a6982610a70565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610ab8578082015181840152602081019050610a9d565b83811115610ac7576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f4e6f7420796574206d6574000000000000000000000000000000000000000000600082015250565b7f4e6f7420596574204d6574000000000000000000000000000000000000000000600082015250565b7f53656e64204574686572204661696c7572650000000000000000000000000000600082015250565b50565b7f43757272656e746c792c206f6e6c79206f776e65722063616e2065786563757460008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b610be381610a5e565b8114610bee57600080fd5b5056fea2646970667358221220e9b21fe89de9fab75a8186cf32839be49bc8cee2942b7ba1bef34f971649268c64736f6c63430008030033";

export class Staking__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staking> {
    return super.deploy(_to, overrides || {}) as Promise<Staking>;
  }
  getDeployTransaction(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_to, overrides || {});
  }
  attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
