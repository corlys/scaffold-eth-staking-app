/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staking, StakingInterface } from "../Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "currentStakerBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Stake",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deadline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "recipient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "threshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610c36380380610c36833981810160405281019061003291906100e2565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c2042610080919061010b565b60018190555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506101e3565b6000815190506100dc816101cc565b92915050565b6000602082840312156100f457600080fd5b6000610102848285016100cd565b91505092915050565b600061011682610193565b915061012183610193565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156101565761015561019d565b5b828201905092915050565b600061016c82610173565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6101d581610161565b81146101e057600080fd5b50565b610a44806101f26000396000f3fe6080604052600436106100865760003560e01c8063614619541161005957806361461954146100f557806366d003ac146100ff5780636f9fb98a1461012a5780638da5cb5b14610155578063e3d670d71461018057610086565b806329dcb0cf1461008b5780633a4b66f1146100b65780633ccfd60b146100c057806342cde4e8146100ca575b600080fd5b34801561009757600080fd5b506100a06101bd565b6040516100ad9190610832565b60405180910390f35b6100be6101c3565b005b6100c8610295565b005b3480156100d657600080fd5b506100df61040c565b6040516100ec9190610832565b60405180910390f35b6100fd610418565b005b34801561010b57600080fd5b506101146105d6565b6040516101219190610760565b60405180910390f35b34801561013657600080fd5b5061013f6105fc565b60405161014c9190610832565b60405180910390f35b34801561016157600080fd5b5061016a610604565b6040516101779190610760565b60405180910390f35b34801561018c57600080fd5b506101a760048036038101906101a29190610655565b610628565b6040516101b49190610832565b60405180910390f35b60015481565b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102129190610869565b925050819055507f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b633600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020543460405161028b9392919061077b565b60405180910390a1565b60015442116102d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d0906107d2565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161033e9061074b565b60006040518083038185875af1925050503d806000811461037b576040519150601f19603f3d011682016040523d82523d6000602084013e610380565b606091505b505090506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080610409576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610400906107f2565b60405180910390fd5b50565b670de0b6b3a764000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049d90610812565b60405180910390fd5b600154421080156104bf575047670de0b6b3a764000011155b6104fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f5906107b2565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516105469061074b565b60006040518083038185875af1925050503d8060008114610583576040519150601f19603f3d011682016040523d82523d6000602084013e610588565b606091505b5050905042600181905550806105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca906107f2565b60405180910390fd5b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600047905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b60008135905061064f816109f7565b92915050565b60006020828403121561066757600080fd5b600061067584828501610640565b91505092915050565b610687816108bf565b82525050565b600061069a600b83610858565b91506106a58261092a565b602082019050919050565b60006106bd600b83610858565b91506106c882610953565b602082019050919050565b60006106e0601283610858565b91506106eb8261097c565b602082019050919050565b600061070360008361084d565b915061070e826109a5565b600082019050919050565b6000610726602183610858565b9150610731826109a8565b604082019050919050565b610745816108f1565b82525050565b6000610756826106f6565b9150819050919050565b6000602082019050610775600083018461067e565b92915050565b6000606082019050610790600083018661067e565b61079d602083018561073c565b6107aa604083018461073c565b949350505050565b600060208201905081810360008301526107cb8161068d565b9050919050565b600060208201905081810360008301526107eb816106b0565b9050919050565b6000602082019050818103600083015261080b816106d3565b9050919050565b6000602082019050818103600083015261082b81610719565b9050919050565b6000602082019050610847600083018461073c565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610874826108f1565b915061087f836108f1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108b4576108b36108fb565b5b828201905092915050565b60006108ca826108d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e6f7420796574206d6574000000000000000000000000000000000000000000600082015250565b7f4e6f7420596574204d6574000000000000000000000000000000000000000000600082015250565b7f53656e64204574686572204661696c7572650000000000000000000000000000600082015250565b50565b7f43757272656e746c792c206f6e6c79206f776e65722063616e2065786563757460008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b610a00816108bf565b8114610a0b57600080fd5b5056fea2646970667358221220e1e999aa718f75a76e6b3e02a91e90a448a4ee066f81dbbaf7684da6c92f5f6664736f6c63430008030033";

export class Staking__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staking> {
    return super.deploy(_to, overrides || {}) as Promise<Staking>;
  }
  getDeployTransaction(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_to, overrides || {});
  }
  attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
